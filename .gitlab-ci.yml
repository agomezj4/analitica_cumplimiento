stages:
  - raw
  - intermediate
  - primary
  - feature_engineering
  - anomaly_detection
  - time_series
  - deploy_staging
  - deploy_production

# Configuración común para todos los stages
.common_setup: &common_setup
  - apt-get update -y && apt-get install -y python3 python3-pip python3-venv
  - python3 -m venv analitica_cumplimiento
  - . analitica_cumplimiento/bin/activate
  - pip install --upgrade pip
  - pip install PyYAML==6.0.0
  - pip install pyarrow==15.0.0
  - pip install pandas==2.2.0
  - pip install fsspec==2024.6.1
  - pip install s3fs==2024.6.1
  - pip install boto3==1.34.155
  - pip install pillow==10.4.0
  - pip install matplotlib==3.5.0

# Instalación específica para el stage primary
.primary_setup: &primary_setup
  - *common_setup
  - pip install pycountry==24.6.1

# Instalación específica para el stage feature
.feature_engineering_setup: &feature_engineering_setup
  - *common_setup
  - pip install scikit-learn==1.5.0

# Instalación específica para el stage anomalias
.anomaly_detection_setup: &anomaly_detection_setup
  - *common_setup
  - pip install scikit-learn==1.5.0
  - pip install scipy==1.14.0

# Instalación específica para el stage series_tiempo
.time_series_setup: &time_series_setup
  - *common_setup
  - pip install numpy==1.26.0
  - pip install statsmodels==0.14.2
  - pip install scikit-learn==1.5.0

## Ejecución de los stages de CI
raw_pipeline:
  image: "python:3.10.0"
  stage: raw
  before_script:
    - *common_setup
  script:
    - echo "INICIO PIPELINE RAW"
    - . analitica_cumplimiento/bin/activate
    - analitica_cumplimiento/bin/python3 __main__.py 'Pipeline Raw'
    - echo "FIN PIPELINE RAW"
  rules:
    - if: '$CI_PIPELINE_TARGET == "raw"'

intermediate_pipeline:
  image: python:3.10.0
  stage: intermediate
  before_script:
    - *common_setup
  script:
    - echo "INICIO PIPELINE INTERMEDIATE"
    - . analitica_cumplimiento/bin/activate
    - analitica_cumplimiento/bin/python3 __main__.py 'Pipeline Intermediate'
    - echo "FIN PIPELINE INTERMEDIATE"
  rules:
    - if: '$CI_PIPELINE_TARGET == "intermediate"'

primary_pipeline:
  image: python:3.10.0
  stage: primary
  before_script:
    - *primary_setup
  script:
    - echo "INICIO PIPELINE PRIMARY"
    - . analitica_cumplimiento/bin/activate
    - analitica_cumplimiento/bin/python3 __main__.py 'Pipeline Primary'
    - echo "FIN PIPELINE PRIMARY"
  rules:
    - if: '$CI_PIPELINE_TARGET == "primary"'

feature_engineering_pipeline:
  image: python:3.10.0
  stage: feature_engineering
  before_script:
    - *feature_engineering_setup
  script:
    - echo "INICIO PIPELINE FEATURE"
    - . analitica_cumplimiento/bin/activate
    - analitica_cumplimiento/bin/python3 __main__.py 'Pipeline Feature Engineering'
    - echo "FIN PIPELINE FEATURE"
  rules:
    - if: '$CI_PIPELINE_TARGET == "feature_engineering"'

anomaly_detection_pipeline:
  image: python:3.10.0
  stage: anomaly_detection
  before_script:
    - *anomaly_detection_setup
  script:
    - echo "INICIO PIPELINE ANOMALIAS"
    - . analitica_cumplimiento/bin/activate
    - analitica_cumplimiento/bin/python3 __main__.py 'Pipeline Anomaly Detection'
    - echo "FIN PIPELINE ANOMALIAS"
  rules:
    - if: '$CI_PIPELINE_TARGET == "anomaly_detection"'

time_series_pipeline:
  image: python:3.10.0
  stage: time_series
  before_script:
    - *time_series_setup
  script:
    - echo "INICIO PIPELINE SERIES DE TIEMPO"
    - . analitica_cumplimiento/bin/activate
    - analitica_cumplimiento/bin/python3 __main__.py 'Pipeline Time Series'
    - echo "FIN PIPELINE SERIES DE TIEMPO"
  rules:
    - if: '$CI_PIPELINE_TARGET == "time_series"'


## Ejecución de los stages de CD
deploy_staging_pipeline:
  image: continuumio/miniconda3  # Usar una imagen que soporte conda
  stage: deploy_staging
  script:
    - echo "Deploying to staging environment"
    - conda env create -f environment.yml
    - echo "source activate analitica_cumplimiento" >> ~/.bashrc
    - chmod +x deploy.sh # Dar permisos de ejecución al script
    - /bin/bash -c "source ~/.bashrc && conda activate analitica_cumplimiento && ./deploy.sh staging"
  rules:
    - if: '$CI_PIPELINE_TARGET == "deploy_staging"'

deploy_production_pipeline:
  image: continuumio/miniconda3  # Usar una imagen que soporte conda
  stage: deploy_production
  script:
    - echo "Deploying to production environment"
    - conda env create -f environment.yml
    - echo "source activate analitica_cumplimiento" >> ~/.bashrc
    - chmod +x deploy.sh # Dar permisos de ejecución al script
    - /bin/bash -c "source ~/.bashrc && conda activate analitica_cumplimiento && ./deploy.sh production"
  rules:
    - if: '$CI_PIPELINE_TARGET == "deploy_production"'

